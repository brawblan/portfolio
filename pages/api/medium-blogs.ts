export default {
  "items": [
    {
      "creator": "Brandon Blankenstein",
      "title": "Control State Throughout A React Project Out of the Box",
      "link": "https://brandonblankenstein.medium.com/control-state-throughout-a-react-project-without-router-redux-or-hooks-617902851b93?source=rss-5a51309d566e------2",
      "pubDate": "Sat, 18 Sep 2021 15:55:20 GMT",
      "content:encoded": "<h4>Prop Drilling your functions to controlstate</h4><p>If you are faced with legacy code or a current project where you are restricted to utilizing React as it comes out of the box it can be difficult to plan out a project that must maintain state, update state, and stay consistent throughout. Here are some tricks Iâ€™ve learned that have allowed me to do justthat!</p><h4>Whatâ€™s in thisexample?</h4><p>Weâ€™ll be creating a simple app that passes state and a function via props to a child that can update the text on the page with a button. Weâ€™ll create initial state values, design reusable functions, create our components, pass props, and easily update state throughout theproject.</p><h4>Create INIT_VALUES</h4><p>A great way to keep up with initial state is to create variables that hold those values. This can also be done in a separate JavaScript (JS) file. Doing this will keep your main file from getting bloated with unnecessary JS. Because of the size of this app I have just included it in the main JS file.<br>In this case I am simply storing a message in a variable and setting that variable in state. With large applications it will help to have an initial state variable to keep everything simple and clean. This is also used in our resetState functionlater!</p><pre>const INIT_MESSAGE = &#39;Hello, World!&#39;</pre><pre>class App extends Component {<br>  constructor(props) {<br>    super(props)<br>    this.state = {<br>      message: INIT_MESSAGE,<br>  }<br>}</pre><h4>Create Functions to UpdateState</h4><p>We will need to create a functions to pass because we will be using our child components to update state. By using generic parameters these functions can be reused.<br>-updateState will take the name (the name of the state weâ€™re changing) and the state (what weâ€™re updating the state to).<br>-updateSubState is not used in this project, but I wanted to include an example of when you may need to update state that is an object or array. We can utilize the name and state parameters the same from our updateState function, but we can add â€œsubâ€ to represent the name of the item we are updating within the object/array.<br>-resetState shows why using initial state variables can be useful. Itâ€™s simple andclean.</p><pre>updateState = (name, state) =&gt; {<br>  this.setState({<br>    [name]: state,<br>  })<br>}</pre><pre>updateSubState = (name, sub, state) =&gt; {<br>  this.setState((prevState) =&gt; ({<br>    [name]: {<br>      ...prevState[name],<br>      [sub]: state,<br>    },<br>  }))<br>}</pre><pre>resetState = () =&gt; {<br>  this.setState({<br>    message: INIT_MESSAGE,<br>  })<br>}</pre><h4>Create Components and PassProps</h4><p>Now you need to create the components and to add the props to pass!<br>I recommend passing the props as the same name of the item youâ€™re passing. In this case I am passing a function called â€œupdateStateâ€ so thatâ€™s what Iâ€™m going to pass it as. Same thing with the messagestate.</p><pre>// within the App file<br>______________________________________________<br>&lt;ParentComponent<br>  updateState={this.updateState}<br>  message={this.state.message}<br>/&gt;<br>______________________________________________<br></pre><pre>//the ParentComponent file<br>______________________________________________<br>import React, { Component } from &#39;react&#39;<br>import ChildComponent from &#39;./ChildComponent&#39;</pre><pre>class ParentComponent extends Component {</pre><pre>  render() {<br>    const { updateState, message } = this.props<br>    return (<br>      &lt;ChildComponent<br>        updateState={updateState}<br>        message={message}<br>      /&gt;<br>    )<br>  }<br>}</pre><pre>export default ParentComponent;<br>______________________________________________</pre><h4>Update State and BeHappy</h4><p>Now weâ€™re all the way down in the deepest component of this project. Weâ€™ve passed the state of the message and weâ€™ve passed our function so that we can update state in our grandparent component (App).<br>Iâ€™ve deconstructed the props that were passed so that I can utilize them in a much cleaner fashion. The child component is going to both display our message and update it with the button.<br>Inside the onClick of the button we are going to pass the updateState function. When we created the function we gave it the parameters of name (name of state) and state (what weâ€™re updating the stateto).</p><pre>import React, { Component } from &#39;react&#39;</pre><pre>class ChildComponent extends Component {<br>  render() {<br>    const { updateState, message } = this.props<br>    return (<br>      &lt;&gt;<br>        &lt;div&gt;{message}&lt;/div&gt;<br>        &lt;button onClick={updateState(&#39;message&#39;, `Howdy, Y&#39;all!`)}&gt;<br>          Change Message<br>        &lt;/button&gt;<br>      &lt;/&gt;<br>    )<br>  }<br>}</pre><pre>export default ChildComponent;</pre><h4>State isupdated!</h4><p>Thatâ€™s it! We have created a simple app that passes props through multiple children (prop drilling) and allows us to update state consistently throughout a project/application.<br>The picture below shows the main file that houses all of our state and parent components. Iâ€™ve included a new component (AnotherComponent) that shows how we can use our state consistently throughout a project. It only passes the message as props, but it will update whenever you press the button in the ChildComponent.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1020/1*A9unZFBpVy7z6lb1dmVS1g.png\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/990/1*4eWeTC_bOMSTnTGdJ3zjmA.png\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*-NcCboNK7ptSAIyOCawrZg.png\" /></figure><h3>Tip or Quote fromBrandon:</h3><p>Today I have a tip!<br>Plan. Out. Your. Projects. <br>My latest project was going great and then I realized I was hitting roadblock after roadblock. I quickly saw that if I kept making changes to get around these obstacles that I was just going to have a jumbled mess of code that was difficult to navigate. <br>That is when I decided to start over and just move over the stuff that I needed. However, with the second iteration of this project came a plan. I knew I needed to keep state consistent throughout the project I was building and so I devised my plan of passing state and function as props and keeping everything centered in my main App.js file. <br>That is where this article comes from! Hopefully youâ€™ve found this article before you made the same mistake as me and are needed a refactor. <br><strong>Happycoding!</strong></p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=617902851b93\" width=\"1\" height=\"1\" alt=\"\">",
      "content:encodedSnippet": "Prop Drilling your functions to controlstate\nIf you are faced with legacy code or a current project where you are restricted to utilizing React as it comes out of the box it can be difficult to plan out a project that must maintain state, update state, and stay consistent throughout. Here are some tricks Iâ€™ve learned that have allowed me to do justthat!\nWhatâ€™s in thisexample?\nWeâ€™ll be creating a simple app that passes state and a function via props to a child that can update the text on the page with a button. Weâ€™ll create initial state values, design reusable functions, create our components, pass props, and easily update state throughout theproject.\nCreate INIT_VALUES\nA great way to keep up with initial state is to create variables that hold those values. This can also be done in a separate JavaScript (JS) file. Doing this will keep your main file from getting bloated with unnecessary JS. Because of the size of this app I have just included it in the main JS file.\nIn this case I am simply storing a message in a variable and setting that variable in state. With large applications it will help to have an initial state variable to keep everything simple and clean. This is also used in our resetState functionlater!\nconst INIT_MESSAGE = 'Hello, World!'\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      message: INIT_MESSAGE,\n  }\n}\nCreate Functions to UpdateState\nWe will need to create a functions to pass because we will be using our child components to update state. By using generic parameters these functions can be reused.\n-updateState will take the name (the name of the state weâ€™re changing) and the state (what weâ€™re updating the state to).\n-updateSubState is not used in this project, but I wanted to include an example of when you may need to update state that is an object or array. We can utilize the name and state parameters the same from our updateState function, but we can add â€œsubâ€ to represent the name of the item we are updating within the object/array.\n-resetState shows why using initial state variables can be useful. Itâ€™s simple andclean.\nupdateState = (name, state) => {\n  this.setState({\n    [name]: state,\n  })\n}\nupdateSubState = (name, sub, state) => {\n  this.setState((prevState) => ({\n    [name]: {\n      ...prevState[name],\n      [sub]: state,\n    },\n  }))\n}\nresetState = () => {\n  this.setState({\n    message: INIT_MESSAGE,\n  })\n}\nCreate Components and PassProps\nNow you need to create the components and to add the props to pass!\nI recommend passing the props as the same name of the item youâ€™re passing. In this case I am passing a function called â€œupdateStateâ€ so thatâ€™s what Iâ€™m going to pass it as. Same thing with the messagestate.\n// within the App file\n______________________________________________\n<ParentComponent\n  updateState={this.updateState}\n  message={this.state.message}\n/>\n______________________________________________\n\n//the ParentComponent file\n______________________________________________\nimport React, { Component } from 'react'\nimport ChildComponent from './ChildComponent'\nclass ParentComponent extends Component {\n  render() {\n    const { updateState, message } = this.props\n    return (\n      <ChildComponent\n        updateState={updateState}\n        message={message}\n      />\n    )\n  }\n}\nexport default ParentComponent;\n______________________________________________\nUpdate State and BeHappy\nNow weâ€™re all the way down in the deepest component of this project. Weâ€™ve passed the state of the message and weâ€™ve passed our function so that we can update state in our grandparent component (App).\nIâ€™ve deconstructed the props that were passed so that I can utilize them in a much cleaner fashion. The child component is going to both display our message and update it with the button.\nInside the onClick of the button we are going to pass the updateState function. When we created the function we gave it the parameters of name (name of state) and state (what weâ€™re updating the stateto).\nimport React, { Component } from 'react'\nclass ChildComponent extends Component {\n  render() {\n    const { updateState, message } = this.props\n    return (\n      <>\n        <div>{message}</div>\n        <button onClick={updateState('message', `Howdy, Y'all!`)}>\n          Change Message\n        </button>\n      </>\n    )\n  }\n}\nexport default ChildComponent;\nState isupdated!\nThatâ€™s it! We have created a simple app that passes props through multiple children (prop drilling) and allows us to update state consistently throughout a project/application.\nThe picture below shows the main file that houses all of our state and parent components. Iâ€™ve included a new component (AnotherComponent) that shows how we can use our state consistently throughout a project. It only passes the message as props, but it will update whenever you press the button in the ChildComponent.\n\nTip or Quote fromBrandon:\nToday I have a tip!\nPlan. Out. Your. Projects. \nMy latest project was going great and then I realized I was hitting roadblock after roadblock. I quickly saw that if I kept making changes to get around these obstacles that I was just going to have a jumbled mess of code that was difficult to navigate. \nThat is when I decided to start over and just move over the stuff that I needed. However, with the second iteration of this project came a plan. I knew I needed to keep state consistent throughout the project I was building and so I devised my plan of passing state and function as props and keeping everything centered in my main App.js file. \nThat is where this article comes from! Hopefully youâ€™ve found this article before you made the same mistake as me and are needed a refactor. \nHappycoding!",
      "dc:creator": "Brandon Blankenstein",
      "guid": "https://medium.com/p/617902851b93",
      "categories": [
        "front-end-development",
        "reactjs",
        "javascript",
        "coding",
        "react"
      ],
      "isoDate": "2021-09-18T15:55:20.000Z"
    },
    {
      "creator": "Brandon Blankenstein",
      "title": "Handling State and Props in React Without Hooks",
      "link": "https://medium.com/geekculture/handling-state-and-props-in-react-without-hooks-e215a197bd81?source=rss-5a51309d566e------2",
      "pubDate": "Tue, 20 Apr 2021 02:05:37 GMT",
      "content:encoded": "<h3>Handling State and Props in React withoutHooks</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/532/1*23-QcatG3AI2N0GSbhsp7g.png\" /></figure><p>Handling state in React is one of my favorite aspects of the framework!<br>Understanding what state is and how to pass it from component to component is one of the big ways React is simplifying web development.</p><p><strong>this.state = {}</strong><br>What is state? <br>State is the current value of a defined JavaScript object. When you create a component in React you can define the state of multiple JS objects and then change them later with some JavaScript magic!</p><pre>class ParentComp extends React.Component {<br>  constructor() {<br>    super()<br><strong>    this.state = {<br>      item: &#39;&#39;<br>    }</strong><br>  }<br>}</pre><p><strong>this.state.[object]<br></strong>To use the state that youâ€™ve declared just use the normal JavaScript syntax within your HTML.<br>The example below sets the inner text of the div to an emptystring.</p><pre>class ParentComp extends React.Component {<br>  constructor() {<br>    super()<br>    this.state = {<br>      item: &#39;&#39;<br>    }<br>  }<br>  render() {<br>    return (<br>      &lt;&gt;<br>       &lt;div&gt;{<strong>this.state.item</strong>}&lt;/div&gt;<br>      &lt;/&gt;<br>    )<br>  }<br>}</pre><p><strong>this.setState()<br></strong>Hereâ€™s the JavaScript magic! setState() is a built-in function that allows us to change the state of our JS object that was previously defined. <br>You can write the JavaScript that you would normally write to update a variable; however, with this one youâ€™ll just call the setState() function to update state within your component.<br>In the example below we can see that whenever we click the button it fires a function called â€˜handleClickâ€™. Inside of this function we see setState() being called. This changes the state of â€˜itemâ€™ from an empty string toâ€˜Helloâ€™.</p><pre>class ParentComp extends React.Component {<br>  constructor() {<br>    super()<br>    this.state = {<br>      item: &#39;&#39;<br>    }<br>    <strong>this.handleClick = this.handleClick.bind(this)</strong><br>  }<br>  <strong>handleClick = (e) =&gt; {<br>      e.preventDefault()<br>      this.setState({ item: &#39;Hello&#39; })<br>    }</strong><br>  render() {<br>    return (<br>      &lt;&gt;<br>       &lt;div&gt;{this.state.item}&lt;/div&gt;<br>      <strong> &lt;button onClick={this.handleClick}&gt;Click Me!&lt;/button&gt;</strong><br>      &lt;/&gt;<br>    )<br>  }<br>}</pre><p><strong>Passing Props<br></strong><em>&lt;Component props={this.state.item} /&gt;</em><strong><br></strong>Passing props (properties) is a HUGE concept to understand when working with a component based project. In general itâ€™s a pretty easy concept to get started but can get more and more complicated the deeper you get with nested components.<br>To pass props to a component just add a property to the component wherever itâ€™s called in your parent component. Weâ€™ll look at how to use the props in the nextsection.</p><pre>class ParentComp extends React.Component {<br>  constructor() {<br>    super()<br>    this.state = {<br>      item: &#39;Hello&#39;<br>    }<br>    this.handleClick = this.handleClick.bind(this)<br>  }<br>  handleClick = (e) =&gt; {<br>      e.preventDefault()<br>      this.setState({ item: &#39;Howdy&#39; })<br>    }<br>  render() {<br>    return (<br>      &lt;&gt;<br>       <strong> &lt;ChildComp props={this.state.item} handleClick={this.handleClick} /&gt;</strong><br>      &lt;/&gt;<br>    )<br>  }<br>}<br>          <br>class ChildComp extends React.Component {<br>  constructor(props) {<br>    super(props)<br>  }<br>  render() {<br>    return (<br>      &lt;&gt;<br>  <strong>     &lt;button onClick={this.props.handleClick}&gt;Click Me!&lt;/button&gt;</strong><br>      &lt;/&gt;<br>    )<br>  }<br>}</pre><p><strong>this.props<br></strong>Utilizing props in your component is as easy as using a variable.<br>You can use a variable to declare your props or you can deconstruct the props.<br>If youâ€™re only passing one variable then itâ€™s okay to just use â€˜this.props.itemâ€™, but itâ€™s going to be much better to deconstruct if youâ€™re passing multipleprops.</p><pre>class ParentComp extends React.Component {<br>  constructor() {<br>    super()<br>    this.state = {<br>      item: &#39;Hello&#39;<br>    }<br>    this.handleClick = this.handleClick.bind(this)<br>  }<br>  handleClick = (e) =&gt; {<br>      e.preventDefault()<br>      this.setState({ item: &#39;Howdy&#39; })<br>    }<br>  render() {<br>    return (<br>      &lt;&gt;<br>        &lt;ChildComp props={this.state.item} handleClick={this.handleClick} /&gt;<br>      &lt;/&gt;<br>    )<br>  }<br>}<br>          <br>class ChildComp extends React.Component {<br>  constructor(props) {<br>    super(props)<br>  }<br>  render() {<br><strong>    const { props } = this.props</strong><br>    return (<br>      &lt;&gt;<br>       <strong>&lt;div&gt;{props}&lt;/div&gt;</strong><br>       &lt;button onClick={this.props.handleClick}&gt;Click Me!&lt;/button&gt;<br>      &lt;/&gt;<br>    )<br>  }<br>}</pre><p>I hope that youâ€™re interested to dive deeper in to using state in React because this for sure isnâ€™t all of it! But I think itâ€™s a good introduction!</p><p><strong>Tip or Quote from Brandon:</strong><br>Today I have aquote!</p><blockquote>â€œIf you are copying the people around you then youâ€™ll only ever be as good as them. Neverbetter.â€</blockquote><p>This is my own quote, so I guess Iâ€™ll explain a little. The main message is that you should always be aware of who youâ€™re surrounding yourself with. I mostly use this to try and motivate my band students to practice, listen to professionals, and actively try to get better.<br>Obviously, there are exceptions, but I believe the general idea is true. If you only see whatâ€™s around you as â€˜goodâ€™ then youâ€™ll never try to be better. Or worse, youâ€™ll try to be better but itâ€™s only a littlebetter.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=e215a197bd81\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/geekculture/handling-state-and-props-in-react-without-hooks-e215a197bd81\">Handling State and Props in React Without Hooks</a> was originally published in <a href=\"https://medium.com/geekculture\">Geek Culture</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>",
      "content:encodedSnippet": "Handling State and Props in React withoutHooks\n\nHandling state in React is one of my favorite aspects of the framework!\nUnderstanding what state is and how to pass it from component to component is one of the big ways React is simplifying web development.\nthis.state = {}\nWhat is state? \nState is the current value of a defined JavaScript object. When you create a component in React you can define the state of multiple JS objects and then change them later with some JavaScript magic!\nclass ParentComp extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      item: ''\n    }\n  }\n}\nthis.state.[object]\nTo use the state that youâ€™ve declared just use the normal JavaScript syntax within your HTML.\nThe example below sets the inner text of the div to an emptystring.\nclass ParentComp extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      item: ''\n    }\n  }\n  render() {\n    return (\n      <>\n       <div>{this.state.item}</div>\n      </>\n    )\n  }\n}\nthis.setState()\nHereâ€™s the JavaScript magic! setState() is a built-in function that allows us to change the state of our JS object that was previously defined. \nYou can write the JavaScript that you would normally write to update a variable; however, with this one youâ€™ll just call the setState() function to update state within your component.\nIn the example below we can see that whenever we click the button it fires a function called â€˜handleClickâ€™. Inside of this function we see setState() being called. This changes the state of â€˜itemâ€™ from an empty string toâ€˜Helloâ€™.\nclass ParentComp extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      item: ''\n    }\n    this.handleClick = this.handleClick.bind(this)\n  }\n  handleClick = (e) => {\n      e.preventDefault()\n      this.setState({ item: 'Hello' })\n    }\n  render() {\n    return (\n      <>\n       <div>{this.state.item}</div>\n       <button onClick={this.handleClick}>Click Me!</button>\n      </>\n    )\n  }\n}\nPassing Props\n<Component props={this.state.item} />\nPassing props (properties) is a HUGE concept to understand when working with a component based project. In general itâ€™s a pretty easy concept to get started but can get more and more complicated the deeper you get with nested components.\nTo pass props to a component just add a property to the component wherever itâ€™s called in your parent component. Weâ€™ll look at how to use the props in the nextsection.\nclass ParentComp extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      item: 'Hello'\n    }\n    this.handleClick = this.handleClick.bind(this)\n  }\n  handleClick = (e) => {\n      e.preventDefault()\n      this.setState({ item: 'Howdy' })\n    }\n  render() {\n    return (\n      <>\n        <ChildComp props={this.state.item} handleClick={this.handleClick} />\n      </>\n    )\n  }\n}          \nclass ChildComp extends React.Component {\n  constructor(props) {\n    super(props)\n  }\n  render() {\n    return (\n      <>\n       <button onClick={this.props.handleClick}>Click Me!</button>\n      </>\n    )\n  }\n}\nthis.props\nUtilizing props in your component is as easy as using a variable.\nYou can use a variable to declare your props or you can deconstruct the props.\nIf youâ€™re only passing one variable then itâ€™s okay to just use â€˜this.props.itemâ€™, but itâ€™s going to be much better to deconstruct if youâ€™re passing multipleprops.\nclass ParentComp extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      item: 'Hello'\n    }\n    this.handleClick = this.handleClick.bind(this)\n  }\n  handleClick = (e) => {\n      e.preventDefault()\n      this.setState({ item: 'Howdy' })\n    }\n  render() {\n    return (\n      <>\n        <ChildComp props={this.state.item} handleClick={this.handleClick} />\n      </>\n    )\n  }\n}          \nclass ChildComp extends React.Component {\n  constructor(props) {\n    super(props)\n  }\n  render() {\n    const { props } = this.props\n    return (\n      <>\n       <div>{props}</div>\n       <button onClick={this.props.handleClick}>Click Me!</button>\n      </>\n    )\n  }\n}\nI hope that youâ€™re interested to dive deeper in to using state in React because this for sure isnâ€™t all of it! But I think itâ€™s a good introduction!\nTip or Quote from Brandon:\nToday I have aquote!\nâ€œIf you are copying the people around you then youâ€™ll only ever be as good as them. Neverbetter.â€\nThis is my own quote, so I guess Iâ€™ll explain a little. The main message is that you should always be aware of who youâ€™re surrounding yourself with. I mostly use this to try and motivate my band students to practice, listen to professionals, and actively try to get better.\nObviously, there are exceptions, but I believe the general idea is true. If you only see whatâ€™s around you as â€˜goodâ€™ then youâ€™ll never try to be better. Or worse, youâ€™ll try to be better but itâ€™s only a littlebetter.\n\nHandling State and Props in React Without Hooks was originally published in Geek Culture on Medium, where people are continuing the conversation by highlighting and responding to this story.",
      "dc:creator": "Brandon Blankenstein",
      "guid": "https://medium.com/p/e215a197bd81",
      "categories": [
        "react-jsx",
        "javascript",
        "reactjs"
      ],
      "isoDate": "2021-04-20T02:05:37.000Z"
    },
    {
      "creator": "Brandon Blankenstein",
      "title": "One Card Fits All",
      "link": "https://brandonblankenstein.medium.com/one-card-fits-all-e8a0659c265f?source=rss-5a51309d566e------2",
      "pubDate": "Wed, 17 Mar 2021 05:21:46 GMT",
      "content:encoded": "<p>Write less HTML for morecontent</p><p>JavaScript is a powerful tool when it comes to simplifying our jobs as front end developers. We can use the amazing power of JS to make more efficient use of our time and make our file sizes smaller!<br>In this article I will go over a few steps to get you introduced to dynamically created cards by writing the HTML for one card and mapping over an array of objects. You can find a link to the GitHub repo in the conclusion.</p><h3>The LongWay</h3><p>The long, time consuming way of creating cards for a website is to hand code each card. Sure, I know what youâ€™re thinking, you can just copy and paste each new card and change the information. <br>This works for just a few cards, but it can get very messy very fast. If there are 20 cards then you have to sift through 200 lines of code to find the card youneed.</p><p>Below is an example of what the HTML of just 3 simple cards can looklike.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*QsP66YEoukK6vy4T1z_IDw.png\" /></figure><p>As you can see this can get confusing and cluttered. <br><strong>I can take the 45 lines of HTML shown above and turn it into 18lines.</strong></p><h3>The ShortWay</h3><p>It is possible that this will seem like the long way in comparison to the example above; however, this is a very short example with only 3 cards being created. Imagine creating 20, 100, or even hundreds ofcards!</p><h3>Step 1</h3><p><strong>Create the HTML<br></strong>In this step we will take out everything related to the cards and just create a parent container that we will put them in. The HTML will be significantly smaller and will be easier to navigate.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*7XprD8PwW2peZ7bADyT1vA.png\" /></figure><h3>Step 2</h3><p>Create the CSS<br>I like to hard code a couple cards just to make sure I can get the CSS set up correctly.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/684/1*h1Uo8WUCeZW0kn-PfaqNyA.png\" /></figure><h3>Step 3</h3><p>Write the JavaScript to create the cards<br>First, create a variable for the card container and create thearray.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*CPvAVFnXFN_Hrf77KWkdBg.png\" /></figure><p>Lastly, create and call the function that will create our dynamicHTML.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/866/1*vDAkAuWH2taHXApVzRr4BQ.png\" /></figure><h3>The FinishedProduct!</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*V6HRVQdzxWNdTcqcVrZKcg.png\" /></figure><p>With just HTML and JavaScript we were able to go from 45 lines of code to 38 lines. 7 lines may not sound like a huge difference, but when you factor in that each card is 10 lines long you can start to imagine that by the 20th card you wish you had written ~1/20 the amount of code for the same output!<br>Additionally, an array of objects will be easier to maintain and search through if you ever need to edit/addcontent.</p><p><strong>In conclusion</strong>, dynamically created HTML can be used to write less code, save yourself from crossing your eyes looking for the card you need, and edit/add cards withease.</p><p>Check out the GitHub repo to play around with the code!<br><a href=\"https://github.com/brawblan/Week8Article_DynamicallyCreatedCards\">Dynamically CreatedCards</a></p><p><strong>Tip or Quote from Brandon</strong><br>Today is atip!</p><p>Find. A. Mentor.<br>&amp;<br>Start one of the social media challenges.</p><p>If youâ€™re like me and have no close personal contacts that are in the coding world then it can be hard to talk to someone that can help truly keep you accountable. <br>Personal accountability is a great skill to develop, but it doesnâ€™t have to always come down to you keeping yourself on the straight and narrow. I believe it is extremely important to realize that learning to code by yourself is possible but should not be your first plan of action. I have found an amazing mentor with <a href=\"https://medium.com/u/72cbd3b1a176\">Devslopes</a> and recommend checking them out or finding another way to have a mentor. It will speed up the learning process by giving you the â€œshortcutsâ€ youâ€™re always looking for. I can certainly talk more onthis!</p><p>The social media challenges may seem cheesy and silly, but they can be a great way to keep you accountable and consistent. Coding every single day is very important. Iâ€™m currently on a road-trip but Iâ€™ve made it a very big point to get my posts in at the end of every day. I canâ€™t bring myself to not keep my posts going (today was day 73 of 100) and I also canâ€™t lie in my posts. This forces me to make sure to build in time to progress my craft. <br>On this trip it meant coding for a short hour before bed or listening to an hour or more of my favorite codingpodcast.</p><p>Whatever you do: Stay consistent, code every day, find external accountability/help.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=e8a0659c265f\" width=\"1\" height=\"1\" alt=\"\">",
      "content:encodedSnippet": "Write less HTML for morecontent\nJavaScript is a powerful tool when it comes to simplifying our jobs as front end developers. We can use the amazing power of JS to make more efficient use of our time and make our file sizes smaller!\nIn this article I will go over a few steps to get you introduced to dynamically created cards by writing the HTML for one card and mapping over an array of objects. You can find a link to the GitHub repo in the conclusion.\nThe LongWay\nThe long, time consuming way of creating cards for a website is to hand code each card. Sure, I know what youâ€™re thinking, you can just copy and paste each new card and change the information. \nThis works for just a few cards, but it can get very messy very fast. If there are 20 cards then you have to sift through 200 lines of code to find the card youneed.\nBelow is an example of what the HTML of just 3 simple cards can looklike.\n\nAs you can see this can get confusing and cluttered. \nI can take the 45 lines of HTML shown above and turn it into 18lines.\nThe ShortWay\nIt is possible that this will seem like the long way in comparison to the example above; however, this is a very short example with only 3 cards being created. Imagine creating 20, 100, or even hundreds ofcards!\nStep 1\nCreate the HTML\nIn this step we will take out everything related to the cards and just create a parent container that we will put them in. The HTML will be significantly smaller and will be easier to navigate.\n\nStep 2\nCreate the CSS\nI like to hard code a couple cards just to make sure I can get the CSS set up correctly.\n\nStep 3\nWrite the JavaScript to create the cards\nFirst, create a variable for the card container and create thearray.\n\nLastly, create and call the function that will create our dynamicHTML.\n\nThe FinishedProduct!\n\nWith just HTML and JavaScript we were able to go from 45 lines of code to 38 lines. 7 lines may not sound like a huge difference, but when you factor in that each card is 10 lines long you can start to imagine that by the 20th card you wish you had written ~1/20 the amount of code for the same output!\nAdditionally, an array of objects will be easier to maintain and search through if you ever need to edit/addcontent.\nIn conclusion, dynamically created HTML can be used to write less code, save yourself from crossing your eyes looking for the card you need, and edit/add cards withease.\nCheck out the GitHub repo to play around with the code!\nDynamically CreatedCards\nTip or Quote from Brandon\nToday is atip!\nFind. A. Mentor.\n&\nStart one of the social media challenges.\nIf youâ€™re like me and have no close personal contacts that are in the coding world then it can be hard to talk to someone that can help truly keep you accountable. \nPersonal accountability is a great skill to develop, but it doesnâ€™t have to always come down to you keeping yourself on the straight and narrow. I believe it is extremely important to realize that learning to code by yourself is possible but should not be your first plan of action. I have found an amazing mentor with Devslopes and recommend checking them out or finding another way to have a mentor. It will speed up the learning process by giving you the â€œshortcutsâ€ youâ€™re always looking for. I can certainly talk more onthis!\nThe social media challenges may seem cheesy and silly, but they can be a great way to keep you accountable and consistent. Coding every single day is very important. Iâ€™m currently on a road-trip but Iâ€™ve made it a very big point to get my posts in at the end of every day. I canâ€™t bring myself to not keep my posts going (today was day 73 of 100) and I also canâ€™t lie in my posts. This forces me to make sure to build in time to progress my craft. \nOn this trip it meant coding for a short hour before bed or listening to an hour or more of my favorite codingpodcast.\nWhatever you do: Stay consistent, code every day, find external accountability/help.",
      "dc:creator": "Brandon Blankenstein",
      "guid": "https://medium.com/p/e8a0659c265f",
      "categories": [
        "devslopes",
        "javascript",
        "css",
        "html",
        "web-development"
      ],
      "isoDate": "2021-03-17T05:21:46.000Z"
    },
    {
      "creator": "Brandon Blankenstein",
      "title": "Loop dee Loop",
      "link": "https://brandonblankenstein.medium.com/loop-dee-loop-2604edd421ca?source=rss-5a51309d566e------2",
      "pubDate": "Sun, 17 Jan 2021 23:27:47 GMT",
      "content:encoded": "<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/259/1*MIwSx6R-g7kE-piZcSfDGA.jpeg\" /></figure><p>Loop methods in JavaScript</p><h3>for</h3><ul><li>loops through a block of code a number oftimes</li></ul><pre>for (let i = 0; i &lt; 10; i++) {<br>  console.log(i);<br>}</pre><pre>logs: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9</pre><p>I used the for loop frequently when I first started coding. I attribute this mostly to the tutorials I was following. I do, however, appreciate all of the practice I got with the basic for loop in the beginning of my JavaScript learning because it made me type out and physically see more of the loopmethod.</p><h3>for/in</h3><ul><li>loops through the properties of anobject</li></ul><pre>const names = [&#39;Brandon&#39;, &#39;Nikki&#39;, &#39;Jaxon&#39;];</pre><pre>for (let i in names) {<br>  console.log(names[i], i);<br>}</pre><pre>logs:<br>&#39;Brandon&#39; 0<br>&#39;Nikki&#39; 1<br>&#39;Jaxon&#39; 2</pre><p>The for/in loop is great when working with arrays and needing to call specific indexes.<br>The â€˜iâ€™ in the for/in references the specific index of eachobject.</p><h3>for/of</h3><ul><li>loops through the values of an iterableobject</li></ul><pre>const names = [&#39;Brandon&#39;, &#39;Nikki&#39;, &#39;Jaxon&#39;];</pre><pre>for (let i of names) {<br>  console.log(i);<br>}</pre><pre>logs:<br>&#39;Brandon&#39;<br>&#39;Nikki&#39;<br>&#39;Jaxon&#39;</pre><p>The for/of loop is great when working with arrays and needing the values without reference to the index.<br>The â€˜iâ€™ in the for/of references eachobject.</p><h4>Double check whether youâ€™re using â€˜inâ€™ or â€˜ofâ€™ when working with for loops. I frequently find myself accidentally typing one or theother.</h4><h3>while</h3><ul><li>loops through a block of code while a specified condition istrue</li></ul><pre>x = 0;</pre><pre>while (x &lt; 5) {<br>  console.log(x);<br>  x++;<br>}</pre><pre>logs: 0, 1, 2, 3, 4</pre><p>The while loop is also great when you utilize a boolean value. <br>It allows you to run the loop while something is true orfalse!</p><pre>let isRed = false;<br>const colors = [&#39;blue&#39;, &#39;yellow&#39;, &#39;red&#39;, &#39;green&#39;];<br>let i = 0;</pre><pre>while (!isRed) {<br>  if (colors[i] !== &#39;red&#39;) {<br>    console.log(colors[i]);<br>    i++;<br>  } else {<br>    isRed = true;<br>  }<br>}</pre><pre>logs:<br>&#39;blue&#39;<br>&#39;yellow&#39;</pre><p>It breaks after it passes â€˜redâ€™ because the loop only runs while isRed is false, but once we match â€˜redâ€™ isRed becomestrue.</p><h3>do/while</h3><ul><li>also loops through a block of code while a specified condition istrue</li></ul><pre>x = 0;</pre><pre>do {<br>  console.log(x);<br>  x++;<br>} <br>while (x &lt; 5);</pre><pre>logs: 0, 1, 2, 3, 4</pre><p>We can set up a boolean do/while loop very similarly to how the while loop was setup.</p><pre>let isRed = false;<br>const colors = [&#39;blue&#39;, &#39;yellow&#39;, &#39;red&#39;, &#39;green&#39;];<br>let i = 0;</pre><pre>do {<br>  if (colors[i] !== &#39;red&#39;) {<br>    console.log(colors[i]);<br>    i++;<br>  } else {<br>    isRed = true;<br>  }<br>}<br>while (!isRed);</pre><pre>logs:<br>&#39;blue&#39;<br>&#39;yellow&#39;</pre><p>While and do/while loops are very similar.<br>Here is a good example/explanation of when and why we would use a do/while loop. <br><a href=\"https://www.javascripttutorial.net/javascript-do-while/\">JavaScript Tutorial</a></p><h3>Resources</h3><p>I utilized <a href=\"https://www.w3schools.com/js/js_loop_for.asp\">w3schools</a> for the bulk of the content, but there are many other resources to understand loops deeper.<br>- <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration\">MDN Docs</a><br>- <a href=\"https://www.geeksforgeeks.org/loops-in-javascript/\">Geeks for Geeks</a><br>- <a href=\"https://www.freecodecamp.org/news/javascript-loops-explained-for-loop-for/\">FreeCodeCamp</a><br>- manyothersâ€¦</p><h3>Tip or Quote fromBrandon</h3><p>Today is atip!</p><p>My tip is to document your troubleshooting process during or soon after you have completed/solved yourproblem.</p><p>I spent 2 1/2 hours trying to install and run mongoDB (a database program for web development). This was a very frustrating process, but was ultimately rewarded with a successful download and more experience with how the terminal does and doesnâ€™twork.</p><p>My goal is two-fold:<br>1- By documenting my experience I hope to have a deeper understanding of my own troubleshooting process AND a deeper understanding of whatever problem it is Iâ€™m trying to solve.<br>2- I hope to save someone multiple hours of frustration in the future. I do believe that the hours of Google searching is worth it for the information you pick up, but I also think theyâ€™ll learn plenty by the time they find yourarticle.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=2604edd421ca\" width=\"1\" height=\"1\" alt=\"\">",
      "content:encodedSnippet": "Loop methods in JavaScript\nfor\n\nloops through a block of code a number oftimes\n\nfor (let i = 0; i < 10; i++) {\n  console.log(i);\n}\nlogs: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9\nI used the for loop frequently when I first started coding. I attribute this mostly to the tutorials I was following. I do, however, appreciate all of the practice I got with the basic for loop in the beginning of my JavaScript learning because it made me type out and physically see more of the loopmethod.\nfor/in\n\nloops through the properties of anobject\n\nconst names = ['Brandon', 'Nikki', 'Jaxon'];\nfor (let i in names) {\n  console.log(names[i], i);\n}\nlogs:\n'Brandon' 0\n'Nikki' 1\n'Jaxon' 2\nThe for/in loop is great when working with arrays and needing to call specific indexes.\nThe â€˜iâ€™ in the for/in references the specific index of eachobject.\nfor/of\n\nloops through the values of an iterableobject\n\nconst names = ['Brandon', 'Nikki', 'Jaxon'];\nfor (let i of names) {\n  console.log(i);\n}\nlogs:\n'Brandon'\n'Nikki'\n'Jaxon'\nThe for/of loop is great when working with arrays and needing the values without reference to the index.\nThe â€˜iâ€™ in the for/of references eachobject.\nDouble check whether youâ€™re using â€˜inâ€™ or â€˜ofâ€™ when working with for loops. I frequently find myself accidentally typing one or theother.\nwhile\n\nloops through a block of code while a specified condition istrue\n\nx = 0;\nwhile (x < 5) {\n  console.log(x);\n  x++;\n}\nlogs: 0, 1, 2, 3, 4\nThe while loop is also great when you utilize a boolean value. \nIt allows you to run the loop while something is true orfalse!\nlet isRed = false;\nconst colors = ['blue', 'yellow', 'red', 'green'];\nlet i = 0;\nwhile (!isRed) {\n  if (colors[i] !== 'red') {\n    console.log(colors[i]);\n    i++;\n  } else {\n    isRed = true;\n  }\n}\nlogs:\n'blue'\n'yellow'\nIt breaks after it passes â€˜redâ€™ because the loop only runs while isRed is false, but once we match â€˜redâ€™ isRed becomestrue.\ndo/while\n\nalso loops through a block of code while a specified condition istrue\n\nx = 0;\ndo {\n  console.log(x);\n  x++;\n} \nwhile (x < 5);\nlogs: 0, 1, 2, 3, 4\nWe can set up a boolean do/while loop very similarly to how the while loop was setup.\nlet isRed = false;\nconst colors = ['blue', 'yellow', 'red', 'green'];\nlet i = 0;\ndo {\n  if (colors[i] !== 'red') {\n    console.log(colors[i]);\n    i++;\n  } else {\n    isRed = true;\n  }\n}while (!isRed);\nlogs:\n'blue'\n'yellow'\nWhile and do/while loops are very similar.\nHere is a good example/explanation of when and why we would use a do/while loop. \nJavaScript Tutorial\nResources\nI utilized w3schools for the bulk of the content, but there are many other resources to understand loops deeper.\n- MDN Docs\n- Geeks for Geeks\n- FreeCodeCamp\n- manyothersâ€¦\nTip or Quote fromBrandon\nToday is atip!\nMy tip is to document your troubleshooting process during or soon after you have completed/solved yourproblem.\nI spent 2 1/2 hours trying to install and run mongoDB (a database program for web development). This was a very frustrating process, but was ultimately rewarded with a successful download and more experience with how the terminal does and doesnâ€™twork.\nMy goal is two-fold:\n1- By documenting my experience I hope to have a deeper understanding of my own troubleshooting process AND a deeper understanding of whatever problem it is Iâ€™m trying to solve.\n2- I hope to save someone multiple hours of frustration in the future. I do believe that the hours of Google searching is worth it for the information you pick up, but I also think theyâ€™ll learn plenty by the time they find yourarticle.",
      "dc:creator": "Brandon Blankenstein",
      "guid": "https://medium.com/p/2604edd421ca",
      "categories": [
        "javascript-tips",
        "for-loop",
        "loops-in-javascript",
        "devslopes",
        "while-loop"
      ],
      "isoDate": "2021-01-17T23:27:47.000Z"
    },
    {
      "creator": "Brandon Blankenstein",
      "title": "Install and Run MongoDB on Mac",
      "link": "https://brandonblankenstein.medium.com/install-and-run-mongodb-on-mac-1604ae750e57?source=rss-5a51309d566e------2",
      "pubDate": "Sun, 17 Jan 2021 21:20:54 GMT",
      "content:encoded": "<p>A simple step-by-step guide to get mongoDB on your Mac:<br>-including some problems I faced and the solutions that worked forme.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Ce0gUe0LbnhL7ebnDGTp5w.png\" /></figure><p>In a perfect world, these 7 steps should work for you. I envy you if they do. If they donâ€™t, youâ€™re in good company. I have included multiple sources and solutions that I found while experiencing hours worth of issues. I hope I save you multiple hours of frustration!</p><p><strong>Step 1:</strong><br>Install <a href=\"https://brew.sh/\">Homebrew</a><br>-paste the command below in your macOSterminal</p><pre>/bin/bash -c &quot;$(curl -fsSL <a href=\"https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh\">https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh</a>)&quot;</pre><p><strong>Step 2:</strong><br>Install<a href=\"https://www.mongodb.com/\">mongoDB</a></p><pre>brew install mongodb</pre><p><strong>Step 3:</strong><br>Create the db directory***</p><pre>mkdir -p /data/db</pre><p><strong>Step 4:</strong><br>Give permissions for /data/db directory</p><pre>sudo chown -R `id -un` /data/db<br># (enter password)</pre><ul><li>** This command will not work if you are running macOS Catalina or newer, see problems/solution section forfix.</li></ul><p><strong>Step 5:</strong><br>Run the Mongo daemon<br>-this will start the mongoserver</p><pre>mongod</pre><p><strong>Step 6:</strong><br>Run the mongo shell<br>-while the Mongo daemon (mongod) is running, <strong>open another terminal </strong>andrun</p><pre>mongo</pre><p><strong>Step 7:<br></strong>When finished, make sure to exitMongo</p><pre>quit() <strong><em>or</em></strong> exit</pre><p>and stop the Mongodaemon</p><pre><em>*ctrl-c*</em></pre><p>It is important to close out of the Mongo shell anytime you arenâ€™t actively using it. This is because if mongoDB does not shutdown correctly (power outage, accidental unplug, etc.) it could lead to data corruption.</p><h3>Problems and their Solutions</h3><h4>maybe</h4><p>Next up is a look at each step and the errors I faced oneach.</p><p><strong>Step 1 issue(s):<br></strong>I did not face any errors when installing Homebrew. This was certainly the easiest part for me, personally.<br>Here is a link to the <a href=\"https://docs.brew.sh/Common-Issues\">Homebrew Issues Documenation</a></p><p><strong>Step 2 issue(s):<br></strong>I received a few errors that went something like:<br>â€œerror no formulae found intapsâ€.</p><p>Once I found the right Stack Overflow question the solution was discovered.<br>Each line is a different command*</p><pre>brew tap mongodb/brew</pre><pre>brew install mongodb-community</pre><pre>brew services start mongodb-community</pre><p><strong>Step 3/4 issue(s):<br></strong>macOS Catalina and newer: the root folder is no longer writable.<br>This is the cause of the â€œread-only file systemâ€error.</p><pre>sudo mkdir -p /System/Volumes/Data/data/db</pre><p>give this permissions:</p><pre>sudo chown -R user_<em>id:user_name</em> /System/Volumes/Data/data/db</pre><pre>example below. the <strong>user_id = blankenstein.dev</strong> and the <strong>user_name = admin</strong> because that is my user status on this computer.</pre><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*t9hhwd-wvsFEmAMMqQNhcQ.png\" /></figure><p><strong>Step 5 issue(s):<br></strong>Running the mongoDBdaemon</p><pre>sudo mongod --dbpath /System/Volumes/Data/data/db</pre><p><strong>Step 6 issue(s):<br></strong>Running the mongoDBshell</p><p>If running</p><pre>mongo</pre><p>give you anerror</p><pre>admin@Admins-MacBook-7 ~ % mongo</pre><pre>MongoDB shell version v4.4.3</pre><pre>connecting to: mongodb://127.0.0.1:27017/?compressors=disabled&amp;gssapiServiceName=mongodb</pre><pre>Error: couldn&#39;t connect to server 127.0.0.1:27017, connection attempt failed: SocketException: Error connecting to 127.0.0.1:27017 :: caused by :: Connection refused :</pre><pre>connect@src/mongo/shell/mongo.js:374:17</pre><pre>@(connect):2:6</pre><pre><strong>exception: connect failed</strong></pre><pre><strong>exiting with code 1</strong></pre><pre>admin@Admins-MacBook-7 ~ %</pre><p>Double check to make sure that you are running the daemon. <br>mongod must be running before you try to run theshell.</p><h3><strong>Other issue(s):</strong></h3><p>A possible quick fix to the daemon throwing a <br>â€œfassert() failureâ€ error could be to:</p><blockquote>turn it off and turn it back onagain</blockquote><pre>brew services stop mongodb-community</pre><pre><strong><em>then</em></strong></pre><pre>brew services start mongodb-community</pre><h3>Live troubleshooting document:</h3><p>I plan on keeping this document updated as I run into problems or if I am ever asked to help solve a problem that isnâ€™t already on thislist.</p><h3>Resources</h3><p><a href=\"https://docs.mongodb.com/manual/reference/exit-codes/\">mongoDB docs exit code andstatuses</a></p><p><a href=\"https://docs.mongodb.com/manual/tutorial/install-mongodb-on-os-x-tarball/#fromHistory\">Install mongoDB Community on macOS using<em>.tgz</em>Tarball</a></p><p><a href=\"https://treehouse.github.io/installation-guides/mac/mongo-mac.html\">treehouse.github.io installation instructions</a></p><p><a href=\"https://docs.mongodb.com/manual/tutorial/install-mongodb-on-os-x/\">mongoDB macOS installation instructions</a></p><p><a href=\"https://stackoverflow.com/questions/58034955/read-only-file-system-when-attempting-mkdir-data-db-on-mac\">Stack Overflow solution: Read-only file system when attempting mkdir</a></p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=1604ae750e57\" width=\"1\" height=\"1\" alt=\"\">",
      "content:encodedSnippet": "A simple step-by-step guide to get mongoDB on your Mac:\n-including some problems I faced and the solutions that worked forme.\n\nIn a perfect world, these 7 steps should work for you. I envy you if they do. If they donâ€™t, youâ€™re in good company. I have included multiple sources and solutions that I found while experiencing hours worth of issues. I hope I save you multiple hours of frustration!\nStep 1:\nInstall Homebrew\n-paste the command below in your macOSterminal\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\nStep 2:\nInstallmongoDB\nbrew install mongodb\nStep 3:\nCreate the db directory***\nmkdir -p /data/db\nStep 4:\nGive permissions for /data/db directory\nsudo chown -R `id -un` /data/db\n# (enter password)\n\n** This command will not work if you are running macOS Catalina or newer, see problems/solution section forfix.\n\nStep 5:\nRun the Mongo daemon\n-this will start the mongoserver\nmongod\nStep 6:\nRun the mongo shell\n-while the Mongo daemon (mongod) is running, open another terminal andrun\nmongo\nStep 7:\nWhen finished, make sure to exitMongo\nquit() or exit\nand stop the Mongodaemon\n*ctrl-c*\nIt is important to close out of the Mongo shell anytime you arenâ€™t actively using it. This is because if mongoDB does not shutdown correctly (power outage, accidental unplug, etc.) it could lead to data corruption.\nProblems and their Solutions\nmaybe\nNext up is a look at each step and the errors I faced oneach.\nStep 1 issue(s):\nI did not face any errors when installing Homebrew. This was certainly the easiest part for me, personally.\nHere is a link to the Homebrew Issues Documenation\nStep 2 issue(s):\nI received a few errors that went something like:\nâ€œerror no formulae found intapsâ€.\nOnce I found the right Stack Overflow question the solution was discovered.\nEach line is a different command*\nbrew tap mongodb/brew\nbrew install mongodb-community\nbrew services start mongodb-community\nStep 3/4 issue(s):\nmacOS Catalina and newer: the root folder is no longer writable.\nThis is the cause of the â€œread-only file systemâ€error.\nsudo mkdir -p /System/Volumes/Data/data/db\ngive this permissions:\nsudo chown -R user_id:user_name /System/Volumes/Data/data/db\nexample below. the user_id = blankenstein.dev and the user_name = admin because that is my user status on this computer.\n\nStep 5 issue(s):\nRunning the mongoDBdaemon\nsudo mongod --dbpath /System/Volumes/Data/data/db\nStep 6 issue(s):\nRunning the mongoDBshell\nIf running\nmongo\ngive you anerror\nadmin@Admins-MacBook-7 ~ % mongo\nMongoDB shell version v4.4.3\nconnecting to: mongodb://127.0.0.1:27017/?compressors=disabled&gssapiServiceName=mongodb\nError: couldn't connect to server 127.0.0.1:27017, connection attempt failed: SocketException: Error connecting to 127.0.0.1:27017 :: caused by :: Connection refused :\nconnect@src/mongo/shell/mongo.js:374:17\n@(connect):2:6\nexception: connect failed\nexiting with code 1\nadmin@Admins-MacBook-7 ~ %\nDouble check to make sure that you are running the daemon. \nmongod must be running before you try to run theshell.\nOther issue(s):\nA possible quick fix to the daemon throwing a \nâ€œfassert() failureâ€ error could be to:\nturn it off and turn it back onagain\nbrew services stop mongodb-community\nthen\nbrew services start mongodb-community\nLive troubleshooting document:\nI plan on keeping this document updated as I run into problems or if I am ever asked to help solve a problem that isnâ€™t already on thislist.\nResources\nmongoDB docs exit code andstatuses\nInstall mongoDB Community on macOS using.tgzTarball\ntreehouse.github.io installation instructions\nmongoDB macOS installation instructions\nStack Overflow solution: Read-only file system when attempting mkdir",
      "dc:creator": "Brandon Blankenstein",
      "guid": "https://medium.com/p/1604ae750e57",
      "categories": [
        "backend-development",
        "macos",
        "mongodb",
        "mongodb-tutorial",
        "mongodb-atlas"
      ],
      "isoDate": "2021-01-17T21:20:54.000Z"
    },
    {
      "creator": "Brandon Blankenstein",
      "title": "filter(), map(), reduce(); Simplified.",
      "link": "https://brandonblankenstein.medium.com/filter-map-reduce-simplified-e2f227ccd2c?source=rss-5a51309d566e------2",
      "pubDate": "Sat, 02 Jan 2021 20:45:44 GMT",
      "content:encoded": "<p>Just another perspective if youâ€™re struggling to use these methods effectively.</p><h3><strong>Array.prototype.filter()</strong></h3><p>filter() takes in an array, iterates over each item, and returns the items that pass a function.</p><p>Simply put: square peg, squarehole.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*YdOrQ7NIRjNUwmJvd7Tqdg.png\" /></figure><p>The original array (shapes) is made up of squares, triangles, and circles. We pass it through a filter and say that each item (named shape) that is equal to a square should be returned. We then have a new array â€˜squaresâ€™ full of all of the items that matched our filter (all of the squares).</p><ul><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\">Array.prototype.filter() - JavaScript | MDN</a></li><li><a href=\"https://www.w3schools.com/jsref/jsref_filter.asp\">JavaScript Array filter() Method</a></li></ul><h3><strong>Array.prototype.map()</strong></h3><p>Not to be confused with the Map constructor.</p><p>map() takes an array, iterates over each item and passes it through the function and finally returns each item. The big difference with map() compared to filter() is that ALL items are returned.</p><p>Simply put: 1 * 2 returns 2 | 2 * 2 returns 4 |etc.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*eRgSki8TEamiHNcSo1QELw.png\" /></figure><p>The original array (numbers) contains the numbers 1â€“5. We pass it through the map() function and multiply each value by 2 (doubling it). It is stored in the variable â€˜doubleâ€™. <br>â€˜doubleâ€™ is now an array or values double the originalarray.</p><ul><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\">Array.prototype.map() - JavaScript | MDN</a></li><li><a href=\"https://www.w3schools.com/jsref/jsref_map.asp\">JavaScript Array map() Method</a></li></ul><h3><strong>Array.prototype.reduce()</strong></h3><p>reduce() takes and array and performs a provided reducer function on each item (left to right) and returns a singlevalue.</p><p>Simply put: you can combine all the items of an array into onevalue.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*55yN9MMeyDNLWkIAQBDTSQ.png\" /></figure><p>The original array (numbers) contains the numbers 1â€“5. We pass it through the reduce() function and add each value to the last one (starting at zero). The result is all of the numbers combined.</p><p>If we were to change the last argument to 2, then the output would be 17 because we would be starting at 2. <br>The default is the first value, so ((a, b) =&gt; a + b)) would also work and return15.</p><ul><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce\">Array.prototype.reduce() - JavaScript | MDN</a></li><li><a href=\"https://www.w3schools.com/jsref/jsref_reduce.asp\">JavaScript Array reduce()</a></li></ul><h3><strong>How To Chain ThemTogether</strong></h3><h4><strong>Array.prototype.filter().map().reduce()</strong></h4><p>Example credit to <a href=\"https://medium.com/u/9ec2b68e4430\">Jason Brewer</a> at Devslopes. If you have questions about taking your next step in Front End/iOS/Android Development checkout <a href=\"https://devslopes.com/\">Devslopes.com</a>!</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*8gjCtKREZR1H-_V48QbOAA.png\" /></figure><p>First, this includes Arrow Function Chaining! Itâ€™s pretty simple as long as you pay attention to the syntax. You put each arrow function on its own line and make sure that there isnâ€™t a semi-colon until the very end! It could all be done on one line but it is much more readable this way. Clean, readable code is happycode.</p><p>Next, we have an array of objects. This means weâ€™ll need to access the different properties. Check out <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects\">MDN Docs</a> and <a href=\"https://www.w3schools.com/js/js_objects.asp\">w3schools</a> to better understand how objectswork.</p><p><strong>Finally!</strong> Time to chain our arrow function! Each <a href=\"https://marketplace.visualstudio.com/items?itemName=adpyke.codesnap\">CodeSnapðŸ“·</a> shows what seconds is equal to after eachmethod.</p><ol><li><strong>Create</strong> a variable â€˜secondsâ€™ and set it equal to the playList variable.</li></ol><p>__________________________________________________________________</p><p><strong>2. filter()</strong> Filter the array to find all objects that include â€˜Codeâ€™ in the title. Now weâ€™re only left with the objects that includeâ€˜Codeâ€™.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*9yDtGBA3Q6I7yAmVrSlFpA.png\" /></figure><p>__________________________________________________________________</p><p><strong>3. map() (pt.1)</strong> Iterate through our new array of objects. This maps through the array and returns just the â€˜durâ€™ value (duration).</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*tCxuMtw87SS3F42rZOKlyQ.png\" /></figure><p>__________________________________________________________________</p><p><strong>4. map() (pt.2)</strong> Iterate through each item (â€˜timeâ€™). Create a new variable that splits each item at the colon and returns a new array with 2 numbers ineach.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*PXsbonK0I9nxt1jWQFi2tg.png\" /></figure><p><strong>continuing..</strong> We finish the second map() by changing the minutes (parts[0]) into seconds and adding it to the other seconds (parts[1]).</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*dPzT9A03xlP2N81XVqol6A.png\" /></figure><p>__________________________________________________________________</p><p><strong>5. reduce()</strong> Finally, we reduce by creating a function to add all seconds together. Remember, the default value is 0. This means it could also say ((totalTime, timeToAdd) =&gt; totalTime + timeToAdd, 0). The first value of totalTime is0.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ijctOkNGQNyLHpyhYv1lLQ.png\" /></figure><h3><strong>Simplification</strong></h3><p>The filter(), map(), and reduce() methods have been great additions to JavaScript! They have simplified what used to take multiple lines of code and are still very readable!</p><p>Always check out the Docs and Google. You should always be able to find answers to questions about the usage of thesemethods.</p><h3>Tip or Quote fromBrandon:</h3><p>Today is a tip. (or Sicc Picc if you listen toSyntax)</p><h4>A great way to immerse yourself into the programming world is to listen to podcasts, watch YouTube videos, and read books/articles.</h4><p>I started my journey from scratch. I knew NOTHING about the industry, but I began consuming content a few months ago. I feel significantly better about the path Iâ€™m on and the next steps I need totake.</p><p>My favorite coding podcast by FAR is <a href=\"https://syntax.fm/\">Syntax.fm</a>. Itâ€™s hosted by Scott Tolinksi and Wes Bos. They talk tech AND real life. Itâ€™s a great listen and jumps around topic to topic so youâ€™re never bored. They also both run Web Development Course businesses. I havenâ€™t had a chance to take any course by Scott, but Wesâ€™s stuff is straight ðŸ”¥. <a href=\"https://medium.com/u/86a55cd7983b\">Wes Bos</a>, <a href=\"https://medium.com/u/2b8ae4791311\">Scott Tolinski</a>.</p><p>I listen to more podcasts than YouTube, but Iâ€™ve really enjoyed checking out <a href=\"https://www.youtube.com/channel/UCe6AC5j4wwqIWBTXi7LwcNg\">Jonathan Vineâ€™s videos</a>. Theyâ€™re all short, sweet, and to the point. He covers a wide variety of topics about getting into the tech industry.</p><p>I have a love/hate relationship with books. I love the idea of reading, but find it difficult to sit down and do it. With that said, my book recommendation is â€˜Clean Codeâ€™ by Robert C. Martin. I havenâ€™t had a chance to really sit down and dig in, but let me tell you.. I have read the foreword and I am EXCITED to getreading.</p><p>Reading can also be in the form of searching for articles <a href=\"https://medium.com/u/504c7870fdb6\">Medium</a> is great for that! Set up notifications where Medium comes up with articles for you to read. Less work for you. Twitter and Instagram can also be good resources if youâ€™re purposeful with what youâ€™re searching for and who youfollow.</p><h3>Happy New Year,Yâ€™all!!</h3><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=e2f227ccd2c\" width=\"1\" height=\"1\" alt=\"\">",
      "content:encodedSnippet": "Just another perspective if youâ€™re struggling to use these methods effectively.\nArray.prototype.filter()\nfilter() takes in an array, iterates over each item, and returns the items that pass a function.\nSimply put: square peg, squarehole.\n\nThe original array (shapes) is made up of squares, triangles, and circles. We pass it through a filter and say that each item (named shape) that is equal to a square should be returned. We then have a new array â€˜squaresâ€™ full of all of the items that matched our filter (all of the squares).\n\nArray.prototype.filter() - JavaScript | MDN\nJavaScript Array filter() Method\n\nArray.prototype.map()\nNot to be confused with the Map constructor.\nmap() takes an array, iterates over each item and passes it through the function and finally returns each item. The big difference with map() compared to filter() is that ALL items are returned.\nSimply put: 1 * 2 returns 2 | 2 * 2 returns 4 |etc.\n\nThe original array (numbers) contains the numbers 1â€“5. We pass it through the map() function and multiply each value by 2 (doubling it). It is stored in the variable â€˜doubleâ€™. \nâ€˜doubleâ€™ is now an array or values double the originalarray.\n\nArray.prototype.map() - JavaScript | MDN\nJavaScript Array map() Method\n\nArray.prototype.reduce()\nreduce() takes and array and performs a provided reducer function on each item (left to right) and returns a singlevalue.\nSimply put: you can combine all the items of an array into onevalue.\n\nThe original array (numbers) contains the numbers 1â€“5. We pass it through the reduce() function and add each value to the last one (starting at zero). The result is all of the numbers combined.\nIf we were to change the last argument to 2, then the output would be 17 because we would be starting at 2. \nThe default is the first value, so ((a, b) => a + b)) would also work and return15.\n\nArray.prototype.reduce() - JavaScript | MDN\nJavaScript Array reduce()\n\nHow To Chain ThemTogether\nArray.prototype.filter().map().reduce()\nExample credit to Jason Brewer at Devslopes. If you have questions about taking your next step in Front End/iOS/Android Development checkout Devslopes.com!\n\nFirst, this includes Arrow Function Chaining! Itâ€™s pretty simple as long as you pay attention to the syntax. You put each arrow function on its own line and make sure that there isnâ€™t a semi-colon until the very end! It could all be done on one line but it is much more readable this way. Clean, readable code is happycode.\nNext, we have an array of objects. This means weâ€™ll need to access the different properties. Check out MDN Docs and w3schools to better understand how objectswork.\nFinally! Time to chain our arrow function! Each CodeSnapðŸ“· shows what seconds is equal to after eachmethod.\n\nCreate a variable â€˜secondsâ€™ and set it equal to the playList variable.\n\n__________________________________________________________________\n2. filter() Filter the array to find all objects that include â€˜Codeâ€™ in the title. Now weâ€™re only left with the objects that includeâ€˜Codeâ€™.\n\n__________________________________________________________________\n3. map() (pt.1) Iterate through our new array of objects. This maps through the array and returns just the â€˜durâ€™ value (duration).\n\n__________________________________________________________________\n4. map() (pt.2) Iterate through each item (â€˜timeâ€™). Create a new variable that splits each item at the colon and returns a new array with 2 numbers ineach.\n\ncontinuing.. We finish the second map() by changing the minutes (parts[0]) into seconds and adding it to the other seconds (parts[1]).\n\n__________________________________________________________________\n5. reduce() Finally, we reduce by creating a function to add all seconds together. Remember, the default value is 0. This means it could also say ((totalTime, timeToAdd) => totalTime + timeToAdd, 0). The first value of totalTime is0.\n\nSimplification\nThe filter(), map(), and reduce() methods have been great additions to JavaScript! They have simplified what used to take multiple lines of code and are still very readable!\nAlways check out the Docs and Google. You should always be able to find answers to questions about the usage of thesemethods.\nTip or Quote fromBrandon:\nToday is a tip. (or Sicc Picc if you listen toSyntax)\nA great way to immerse yourself into the programming world is to listen to podcasts, watch YouTube videos, and read books/articles.\nI started my journey from scratch. I knew NOTHING about the industry, but I began consuming content a few months ago. I feel significantly better about the path Iâ€™m on and the next steps I need totake.\nMy favorite coding podcast by FAR is Syntax.fm. Itâ€™s hosted by Scott Tolinksi and Wes Bos. They talk tech AND real life. Itâ€™s a great listen and jumps around topic to topic so youâ€™re never bored. They also both run Web Development Course businesses. I havenâ€™t had a chance to take any course by Scott, but Wesâ€™s stuff is straight ðŸ”¥. Wes Bos, Scott Tolinski.\nI listen to more podcasts than YouTube, but Iâ€™ve really enjoyed checking out Jonathan Vineâ€™s videos. Theyâ€™re all short, sweet, and to the point. He covers a wide variety of topics about getting into the tech industry.\nI have a love/hate relationship with books. I love the idea of reading, but find it difficult to sit down and do it. With that said, my book recommendation is â€˜Clean Codeâ€™ by Robert C. Martin. I havenâ€™t had a chance to really sit down and dig in, but let me tell you.. I have read the foreword and I am EXCITED to getreading.\nReading can also be in the form of searching for articles Medium is great for that! Set up notifications where Medium comes up with articles for you to read. Less work for you. Twitter and Instagram can also be good resources if youâ€™re purposeful with what youâ€™re searching for and who youfollow.\nHappy New Year,Yâ€™all!!",
      "dc:creator": "Brandon Blankenstein",
      "guid": "https://medium.com/p/e2f227ccd2c",
      "categories": [
        "devslopes",
        "web-development",
        "javascript",
        "javascript-tips",
        "coding"
      ],
      "isoDate": "2021-01-02T20:45:44.000Z"
    },
    {
      "creator": "Brandon Blankenstein",
      "title": "var(-css);",
      "link": "https://brandonblankenstein.medium.com/var-css-f2a51570101b?source=rss-5a51309d566e------2",
      "pubDate": "Wed, 09 Dec 2020 18:58:03 GMT",
      "content:encoded": "<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/896/1*5Je30kLWbqSK-GuBm5ChlA.png\" /></figure><h3>var(-css);</h3><p>CSS-Variables</p><blockquote><strong>Custom properties</strong> (sometimes referred to as <strong>CSS variables</strong> or <strong>cascading variables</strong>) are entities defined by CSS authors that contain specific values to be reused throughout a document. They are set using custom property notation (e.g., <strong>--main-color: black;</strong>) and are accessed using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/var\">var()</a> function (e.g., color: <strong>var(--main-color)</strong>;).</blockquote><blockquote>-MDN webdocs</blockquote><p>Using CSS Variables allows you to set a variable name and have it define a specific value. An advantage of using variable throughout your css allows you to change the definition of a variable if you decide that you want it to be something different later on. It can also allow a user to change the definitions if you give them theoption.</p><h3>CSS Variable setup</h3><p>The first step in setting up a css variable is to go into your css file and create a:rootelement.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/552/1*elIFlmCCNYsBQb2uuvb1ig.png\" /></figure><p>This is where you will place all of your variables. The:root element should be at the top of your first css file so that it will be able to cascade down to every other css line/file.</p><h3>Creating avariable</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/1*yDc9gBvJkUYkq14ATJ5xMQ.png\" /></figure><p>Css variables are created by using two dashes followed by the custom name, then the definition.</p><h3>Using theVariable</h3><p>Using the variable is as easy as defining any other element in CSS. All you have to do is declare the value you would like to change and use var(-custom-name) to use your custom variable.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/858/1*8ZC1Y88pAc1ZZaACRxGGMQ.png\" /></figure><h3>CSS VariableExample</h3><p>In this example I will set up a variable, use the variable, and then change the value, which will affect the entire cssfile.</p><h4>First- create yourvariable</h4><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/672/1*Jp2oKHdIvXKbeiCGNDqL3g.png\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/103/1*ugvIp6d38VaL-_qnPcqxUQ.png\" /></figure><h4>Second- use yourvariable</h4><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/872/1*BsHc3DgxchYBAhHMar3qaA.png\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/120/1*rlzZSwh2_oYAbdDoa1WoUw.png\" /></figure><p>Thatâ€™s it! Itâ€™s really that easy to define a variable.</p><h4>Last- redefine the variablevalue</h4><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/872/1*mSUO44iozlBqe9Wjv1JvWg.png\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/119/1*mykCJ3p7ssdVISRXSlhBeA.png\" /></figure><p>All I had to do to change the background color was redefine the value of the variable I created. That may not seem like much since I only used my variable once in the example, but imagine that youâ€™ve used the variable 10+, even 100+ times! Changing all of those through one line of CSS is a huge time and headachesaver!</p><h3>What not todo</h3><p>You canâ€™t define a variable with a color and use it to define a property that uses numbers. This will cause the value to set to the default initialvalue.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/734/1*kw_r7wkATST4qgtxm9wVkg.png\" /></figure><h3>Resources:</h3><ul><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties\">MDN web docs- CSS Custom Properties</a></li><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/var()\">MDN web docs-var()</a></li><li><a href=\"https://www.w3schools.com/css/css3_variables.asp\">w3schools- CSS Variables- The var()Function</a></li></ul><h3>Tip or Quote fromBrandon:</h3><p>Today, I have atip.</p><p>Give. Yourself. A.Break.</p><p>You deserve it. Youâ€™ve earned it. But when youâ€™re done relaxing and youâ€™ve treated yourself, get back on the horse. Get back to work. And get it done. You owe it to yourself to keep workinghard.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=f2a51570101b\" width=\"1\" height=\"1\" alt=\"\">",
      "content:encodedSnippet": "var(-css);\nCSS-Variables\nCustom properties (sometimes referred to as CSS variables or cascading variables) are entities defined by CSS authors that contain specific values to be reused throughout a document. They are set using custom property notation (e.g., --main-color: black;) and are accessed using the var() function (e.g., color: var(--main-color);).\n-MDN webdocs\nUsing CSS Variables allows you to set a variable name and have it define a specific value. An advantage of using variable throughout your css allows you to change the definition of a variable if you decide that you want it to be something different later on. It can also allow a user to change the definitions if you give them theoption.\nCSS Variable setup\nThe first step in setting up a css variable is to go into your css file and create a:rootelement.\n\nThis is where you will place all of your variables. The:root element should be at the top of your first css file so that it will be able to cascade down to every other css line/file.\nCreating avariable\n\nCss variables are created by using two dashes followed by the custom name, then the definition.\nUsing theVariable\nUsing the variable is as easy as defining any other element in CSS. All you have to do is declare the value you would like to change and use var(â€Šâ€”â€Šcustom-name) to use your custom variable.\n\nCSS VariableExample\nIn this example I will set up a variable, use the variable, and then change the value, which will affect the entire cssfile.\nFirst- create yourvariable\n\nSecond- use yourvariable\n\nThatâ€™s it! Itâ€™s really that easy to define a variable.\nLast- redefine the variablevalue\n\nAll I had to do to change the background color was redefine the value of the variable I created. That may not seem like much since I only used my variable once in the example, but imagine that youâ€™ve used the variable 10+, even 100+ times! Changing all of those through one line of CSS is a huge time and headachesaver!\nWhat not todo\nYou canâ€™t define a variable with a color and use it to define a property that uses numbers. This will cause the value to set to the default initialvalue.\n\nResources:\n\nMDN web docs- CSS Custom Properties\nMDN web docs-var()\nw3schools- CSS Variables- The var()Function\n\nTip or Quote fromBrandon:\nToday, I have atip.\nGive. Yourself. A.Break.\nYou deserve it. Youâ€™ve earned it. But when youâ€™re done relaxing and youâ€™ve treated yourself, get back on the horse. Get back to work. And get it done. You owe it to yourself to keep workinghard.",
      "dc:creator": "Brandon Blankenstein",
      "guid": "https://medium.com/p/f2a51570101b",
      "categories": [
        "css-variables",
        "web-development",
        "css",
        "devslopes",
        "html"
      ],
      "isoDate": "2020-12-09T18:58:03.000Z"
    },
    {
      "creator": "Brandon Blankenstein",
      "title": "Do you Git it?",
      "link": "https://brandonblankenstein.medium.com/do-you-git-it-8e587e50269e?source=rss-5a51309d566e------2",
      "pubDate": "Tue, 17 Nov 2020 02:10:28 GMT",
      "content:encoded": "<p>A few GitHubBasics</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*8SDq3Zu_XKjAulcs\" /><figcaption>Photo by <a href=\"https://unsplash.com/@richygreat?utm_source=medium&amp;utm_medium=referral\">Richy Great</a> on<a href=\"https://unsplash.com?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><h3>What isGit?</h3><blockquote>Git is a <a href=\"https://git-scm.com/about/free-and-open-source\">free and open source</a> distributed version control system designed to handle everything from small to very large projects with speed and efficiency.â€Šâ€”â€Šfromâ€Šâ€”â€Š<a href=\"https://git-scm.com/\">https://git-scm.com/</a></blockquote><p>What this means is that you can keep track of changes in the code of a project whether working on a team or as an individual. Git is able to save past versions and merge files from different team members and muchmore!</p><h3>GitHub: <strong><em>About</em></strong></h3><blockquote>GitHub is how people build software.</blockquote><p>At least, thatâ€™s what they have on their website. GitHub exists to support the development community to learn, share, and work together to build software. This article is about GitHub basics, but the most basic thing is the probably that Git is not GitHub and GitHub is notGit.</p><p>As mentioned above, Git is a version control system and can be used by many softwares. In fact, you can download it straight in the terminal (on Mac). GitHub is one of the best products for Git. There are a few basic features that you should know about that makes Git and GitHub sogreat!</p><h3>GitHub: Repository</h3><p>A repository is defined as a place, building, or receptacle where things are or may be stored. Git uses repositories to store and track all changes made to your files over time. This creates a history and allows you to recall past versions of your files, which is a great feature when you run into bugs and need to find out where theystarted.</p><p>GitHub is a repository hosting service that adds features to enhance your experience using Git. While Git is a command-line tool, GitHub visualizes the actions and changes that are happening so that you can better track and analyze yourproject.</p><p>Basically: A shared folder that you can upload new files to and other can view and edit those files. ie. Google Drive, OneDrive, orDropbox.</p><h3>GitHub: Issues</h3><p>Issues are a way to talk about problems with the code, share ideas for a specific project, or track bugs. Think of it more as a news feed/to-do list for each project. You can discuss and take note of different topics and then when everything has been committed, you can close and issue! (the to-do listpart)</p><p>Basically: A social media news feed that you delete when everything is finished.</p><h3>GitHub: Commits</h3><p>To throw in more foreign terminology, letâ€™s talk about commits. A commit is just a new version of a file youâ€™re working on. When you â€œcommitâ€ you are saving the new version (remember, weâ€™re saving old versions in the commit repository) with a new ID and a commit message to describe the changes that were made. The commit message allows the group, or just you, to track thechanges.</p><p>Basically: Youâ€™re just saving the file, but itâ€™s a â€œsave asâ€ file and you can add a description so you and others can know why you changedit.</p><h3>GitHub: Push</h3><p>In GitHub, or your IDE, you will push a commit. This will send the committed changes to a remote repository on GitHub.com. This allows you to access it from any computer and for you teammates to view and work on the updatedproject.</p><p>Basically: You save your file with a new ID and then put it in your GitHub repository.</p><h3>GitHub: Pull &amp;Merge</h3><p>Pulling and Merging are different actions, but are often performed together.</p><p>A pull is when you fetch changes to a shared file AND merging them. Merging is more specifically the act of combining the changes to a file. This is often done as a â€œpull requestâ€ where changes are proposed and then accepted or denied by the repositoryâ€™s collaborators.</p><p>Basically: You â€œpullâ€ the file from the repository to your computer and â€œmergeâ€ the changes from their file and yourfile.</p><h3>GitHub: Basically</h3><p>Basically: GitHub is awesome and will help you and your team keep up with your project and allow you to keep up with changes and save files through versioncontrol.</p><p>For more information check out <a href=\"https://github.com/\">GitHub.com</a>.</p><p>For more help with definitions and GitHub lingo check out <a href=\"https://docs.github.com/en/free-pro-team@latest/github/getting-started-with-github/github-glossary#merge\">Docs.GitHub.com</a>.</p><h3>Tip or Quote fromBrandon:</h3><p>Today, I have a quote for you. My favorite quote of all time, which is misquoted by the way, is from Will Durantâ€™s book <em>â€œThe Story of Philosophy.â€</em></p><blockquote>â€œWe are what we repeatedly do. Excellence, then, is not an act, but ahabit.â€</blockquote><p>Donâ€™t believe that itâ€™s misquoted? Check out another article on Medium written by Caelan Huntress called <a href=\"https://medium.com/the-mission/my-favourite-quote-of-all-time-is-a-misattribution-66356f22843d\"><strong><em>My favourite quote of all time is a misattribution.</em></strong></a></p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=8e587e50269e\" width=\"1\" height=\"1\" alt=\"\">",
      "content:encodedSnippet": "A few GitHubBasics\nPhoto by Richy Great onUnsplash\nWhat isGit?\nGit is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.â€Šâ€”â€Šfromâ€Šâ€”â€Šhttps://git-scm.com/\nWhat this means is that you can keep track of changes in the code of a project whether working on a team or as an individual. Git is able to save past versions and merge files from different team members and muchmore!\nGitHub: About\nGitHub is how people build software.\nAt least, thatâ€™s what they have on their website. GitHub exists to support the development community to learn, share, and work together to build software. This article is about GitHub basics, but the most basic thing is the probably that Git is not GitHub and GitHub is notGit.\nAs mentioned above, Git is a version control system and can be used by many softwares. In fact, you can download it straight in the terminal (on Mac). GitHub is one of the best products for Git. There are a few basic features that you should know about that makes Git and GitHub sogreat!\nGitHub: Repository\nA repository is defined as a place, building, or receptacle where things are or may be stored. Git uses repositories to store and track all changes made to your files over time. This creates a history and allows you to recall past versions of your files, which is a great feature when you run into bugs and need to find out where theystarted.\nGitHub is a repository hosting service that adds features to enhance your experience using Git. While Git is a command-line tool, GitHub visualizes the actions and changes that are happening so that you can better track and analyze yourproject.\nBasically: A shared folder that you can upload new files to and other can view and edit those files. ie. Google Drive, OneDrive, orDropbox.\nGitHub: Issues\nIssues are a way to talk about problems with the code, share ideas for a specific project, or track bugs. Think of it more as a news feed/to-do list for each project. You can discuss and take note of different topics and then when everything has been committed, you can close and issue! (the to-do listpart)\nBasically: A social media news feed that you delete when everything is finished.\nGitHub: Commits\nTo throw in more foreign terminology, letâ€™s talk about commits. A commit is just a new version of a file youâ€™re working on. When you â€œcommitâ€ you are saving the new version (remember, weâ€™re saving old versions in the commit repository) with a new ID and a commit message to describe the changes that were made. The commit message allows the group, or just you, to track thechanges.\nBasically: Youâ€™re just saving the file, but itâ€™s a â€œsave asâ€ file and you can add a description so you and others can know why you changedit.\nGitHub: Push\nIn GitHub, or your IDE, you will push a commit. This will send the committed changes to a remote repository on GitHub.com. This allows you to access it from any computer and for you teammates to view and work on the updatedproject.\nBasically: You save your file with a new ID and then put it in your GitHub repository.\nGitHub: Pull &Merge\nPulling and Merging are different actions, but are often performed together.\nA pull is when you fetch changes to a shared file AND merging them. Merging is more specifically the act of combining the changes to a file. This is often done as a â€œpull requestâ€ where changes are proposed and then accepted or denied by the repositoryâ€™s collaborators.\nBasically: You â€œpullâ€ the file from the repository to your computer and â€œmergeâ€ the changes from their file and yourfile.\nGitHub: Basically\nBasically: GitHub is awesome and will help you and your team keep up with your project and allow you to keep up with changes and save files through versioncontrol.\nFor more information check out GitHub.com.\nFor more help with definitions and GitHub lingo check out Docs.GitHub.com.\nTip or Quote fromBrandon:\nToday, I have a quote for you. My favorite quote of all time, which is misquoted by the way, is from Will Durantâ€™s book â€œThe Story of Philosophy.â€\nâ€œWe are what we repeatedly do. Excellence, then, is not an act, but ahabit.â€\nDonâ€™t believe that itâ€™s misquoted? Check out another article on Medium written by Caelan Huntress called My favourite quote of all time is a misattribution.",
      "dc:creator": "Brandon Blankenstein",
      "guid": "https://medium.com/p/8e587e50269e",
      "categories": [
        "github",
        "git",
        "devslopes",
        "github-pages"
      ],
      "isoDate": "2020-11-17T02:10:28.000Z"
    },
    {
      "creator": "Brandon Blankenstein",
      "title": "||: Sleep. Code. Work. Relax.:|| Creating a Schedule to be Successful",
      "link": "https://brandonblankenstein.medium.com/sleep-code-work-relax-creating-a-schedule-to-be-successful-a037b074e772?source=rss-5a51309d566e------2",
      "pubDate": "Sun, 15 Nov 2020 18:29:46 GMT",
      "content:encoded": "<h3>||: Sleep. Code. Work. Relax.:||</h3><p><em>Creating a Schedule to be Successful</em></p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*plKKGyYl8yjrfnTV\" /><figcaption>Photo by <a href=\"https://unsplash.com/@_imkiran?utm_source=medium&amp;utm_medium=referral\">Sai Kiran Anagani</a> on<a href=\"https://unsplash.com?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>Learning to code is no easy task. Learning to code while also having a job, going to the gym, making sure you show love to your partner, and keeping up with the multiple other things in your life can seem impossible. There is no one way to be successful, but there are a few things you can do to get you down the rightpath.</p><h3><strong>#1 Breath In. Breath Out. Now make a schedule.</strong></h3><p>The first thing to do is to write down the schedule you already have. We are creatures of habit so it should be fairly similar day-to-day. Once youâ€™ve written down what you do in a day start figuring out where you can fit coding into your schedule. For me, I needed to make the decision to stay uplater.</p><h4>My schedule before coding looked a lotlike:</h4><p>5:00am- Wake up, go to thegym</p><p>7:00am- Get ready forwork</p><p>8:00am- Get towork</p><p>8:00pm- Get home, eat dinner, and spend time with my wife, *Iâ€™m a Band Director, so this workday is only during marchingseason</p><p>10:00pm- Go tobed</p><h4>My schedule once I started the Devslopes Web Development Academy:</h4><p>5:00am- Wake up, go to thegym</p><p>7:00am- Get ready forwork</p><p>8:00am- Get towork</p><p>8:00pm- Get home, eat dinner, and spend time with my wife, *Iâ€™m a Band Director, so this workday is only during marchingseason</p><p>10:00pm- kiss my wife goodnight, startcoding</p><p>12:00am- wrap up my coding session and go tobed</p><h3><strong>#2 Sleep is important. *Disclaimer</strong></h3><p>I knowâ€¦ I donâ€™t get a lot of sleep based on the schedule above. Because of this, I wanted to dedicate an entire section about a few disclaimers.</p><p><strong>First disclaimer:</strong> I am okay with getting less sleep (sometimes). The schedule above where I was able to add in coding is honestly just my most packed days. I donâ€™t have marching rehearsal every day which allows me to move my schedule forward a couple of hours and get to bed by 10:00pm. Having gone through college as a music major, marching drum corps, and marching in a world class WGI percussion ensemble I gained experience functioning at a high level on little and no sleep. With all of this said, I do make sure to find days where I let my body get extra rest. These are typically Sunday mornings and couple of days during the week. Which leads ustoâ€¦</p><p><strong>Second disclaimer:</strong> I am very consistent, but I make sure to allow myself to be human, rest, and recover. When it comes to the gym and nutrition my trainer and I talk about being as close 75%-85% as possible. What that means is that as long as I stay within that percentage in my eating and working out I will still see progress.</p><p>What does that mean? It means I can have a grilled cheese (on bread) with my wife for dinner. I can have ONE cookie. It means I can skip 1â€“2 days of workouts a week if I really need thesleep.</p><p>Hereâ€™s what it doesnâ€™t mean. I can fall into a habit of eating lots of bread and sugar. I can skip those 1â€“2 days and make it 2â€“3 days a week. I still have to hold myself accountable.</p><p>Where this holds true to coding and sleep (the original topic) is making sure to stay 75%-85% on point. This means you MUST code every single day. Except when you have a football game and you get home at 12:30am. However, if you want to fill in some of your lost percentage you can always find extra time in another day. Thatâ€™s discipline.</p><p><strong>Third Disclaimer: </strong>I am only able to stay awake and keep working because I have a purpose to stay awake. There are days that I turn in after 30 minutes of practicing coding because I donâ€™t have motivation in that moment. This is a RARE occurrence. I find my motivation through goals. If you â€œdonâ€™t function well on little sleepâ€ maybe itâ€™s because you have a hard time justifying the exhaustion. I donâ€™t want to condone exhausting yourself, but I do want to pose the question â€œwhy is this worth it?â€ Maybe this can help motivate you to put in the extratime.</p><h3><strong>#3 Relaxing is important.</strong></h3><p>Doing nothing is an important part of my day. I look forward to watching a movie or series with my wife. Itâ€™s something we do every day. I am able to turn my brain off and just relax for a while. I find that this allows me to jump back into coding revived and ready to learn. Relaxing is driving down to Austin to go check out a coffee shop with my friends or checking out the outletstores.</p><p>Iâ€™m at the point in pushing my career that I believe driving in the car and listening to music is wasting time. I HAVE to have a coding or health podcast playing and I HAVE to be paying attention.</p><p>I donâ€™t want to turn the podcasts off just yet, but I do make sure that when Iâ€™m with someone that I have the coding part of me turned off. Iâ€™m involved in the conversation. I have music playing in the car. Iâ€™m off my phone. I make it a point to utilize my downtime to the fullestextent.</p><h3><strong>#4 Have funcoding.</strong></h3><p>I think itâ€™s cliche and cheesy to â€œremember why you started to learn codingâ€. My reasons have changed from when I began and I expect them to keep changing. So, my recommendation is to continually reinvent why youâ€™re learning to code. There will probably be a common theme throughout, but itâ€™s okay if there isnâ€™t. I really like puzzles and logic and coding is just a big puzzle with logic thrown in. Maybe Iâ€™m weird but I really enjoy the challenge that coding presents and the joy of solving a problem that was previously unsolvable toyou.</p><p><strong>Final advice:</strong> Make fun projects. Do things wrong. Read articles. Watch YouTube videos. Find a cheap online course. Ask questions. Do nothing. <strong>Most of all- show love to your friends andfamily.</strong></p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=a037b074e772\" width=\"1\" height=\"1\" alt=\"\">",
      "content:encodedSnippet": "||: Sleep. Code. Work. Relax.:||\nCreating a Schedule to be Successful\nPhoto by Sai Kiran Anagani onUnsplash\nLearning to code is no easy task. Learning to code while also having a job, going to the gym, making sure you show love to your partner, and keeping up with the multiple other things in your life can seem impossible. There is no one way to be successful, but there are a few things you can do to get you down the rightpath.\n#1 Breath In. Breath Out. Now make a schedule.\nThe first thing to do is to write down the schedule you already have. We are creatures of habit so it should be fairly similar day-to-day. Once youâ€™ve written down what you do in a day start figuring out where you can fit coding into your schedule. For me, I needed to make the decision to stay uplater.\nMy schedule before coding looked a lotlike:\n5:00am- Wake up, go to thegym\n7:00am- Get ready forwork\n8:00am- Get towork\n8:00pm- Get home, eat dinner, and spend time with my wife, *Iâ€™m a Band Director, so this workday is only during marchingseason\n10:00pm- Go tobed\nMy schedule once I started the Devslopes Web Development Academy:\n5:00am- Wake up, go to thegym\n7:00am- Get ready forwork\n8:00am- Get towork\n8:00pm- Get home, eat dinner, and spend time with my wife, *Iâ€™m a Band Director, so this workday is only during marchingseason\n10:00pm- kiss my wife goodnight, startcoding\n12:00am- wrap up my coding session and go tobed\n#2 Sleep is important. *Disclaimer\nI knowâ€¦ I donâ€™t get a lot of sleep based on the schedule above. Because of this, I wanted to dedicate an entire section about a few disclaimers.\nFirst disclaimer: I am okay with getting less sleep (sometimes). The schedule above where I was able to add in coding is honestly just my most packed days. I donâ€™t have marching rehearsal every day which allows me to move my schedule forward a couple of hours and get to bed by 10:00pm. Having gone through college as a music major, marching drum corps, and marching in a world class WGI percussion ensemble I gained experience functioning at a high level on little and no sleep. With all of this said, I do make sure to find days where I let my body get extra rest. These are typically Sunday mornings and couple of days during the week. Which leads ustoâ€¦\nSecond disclaimer: I am very consistent, but I make sure to allow myself to be human, rest, and recover. When it comes to the gym and nutrition my trainer and I talk about being as close 75%-85% as possible. What that means is that as long as I stay within that percentage in my eating and working out I will still see progress.\nWhat does that mean? It means I can have a grilled cheese (on bread) with my wife for dinner. I can have ONE cookie. It means I can skip 1â€“2 days of workouts a week if I really need thesleep.\nHereâ€™s what it doesnâ€™t mean. I can fall into a habit of eating lots of bread and sugar. I can skip those 1â€“2 days and make it 2â€“3 days a week. I still have to hold myself accountable.\nWhere this holds true to coding and sleep (the original topic) is making sure to stay 75%-85% on point. This means you MUST code every single day. Except when you have a football game and you get home at 12:30am. However, if you want to fill in some of your lost percentage you can always find extra time in another day. Thatâ€™s discipline.\nThird Disclaimer: I am only able to stay awake and keep working because I have a purpose to stay awake. There are days that I turn in after 30 minutes of practicing coding because I donâ€™t have motivation in that moment. This is a RARE occurrence. I find my motivation through goals. If you â€œdonâ€™t function well on little sleepâ€ maybe itâ€™s because you have a hard time justifying the exhaustion. I donâ€™t want to condone exhausting yourself, but I do want to pose the question â€œwhy is this worth it?â€ Maybe this can help motivate you to put in the extratime.\n#3 Relaxing is important.\nDoing nothing is an important part of my day. I look forward to watching a movie or series with my wife. Itâ€™s something we do every day. I am able to turn my brain off and just relax for a while. I find that this allows me to jump back into coding revived and ready to learn. Relaxing is driving down to Austin to go check out a coffee shop with my friends or checking out the outletstores.\nIâ€™m at the point in pushing my career that I believe driving in the car and listening to music is wasting time. I HAVE to have a coding or health podcast playing and I HAVE to be paying attention.\nI donâ€™t want to turn the podcasts off just yet, but I do make sure that when Iâ€™m with someone that I have the coding part of me turned off. Iâ€™m involved in the conversation. I have music playing in the car. Iâ€™m off my phone. I make it a point to utilize my downtime to the fullestextent.\n#4 Have funcoding.\nI think itâ€™s cliche and cheesy to â€œremember why you started to learn codingâ€. My reasons have changed from when I began and I expect them to keep changing. So, my recommendation is to continually reinvent why youâ€™re learning to code. There will probably be a common theme throughout, but itâ€™s okay if there isnâ€™t. I really like puzzles and logic and coding is just a big puzzle with logic thrown in. Maybe Iâ€™m weird but I really enjoy the challenge that coding presents and the joy of solving a problem that was previously unsolvable toyou.\nFinal advice: Make fun projects. Do things wrong. Read articles. Watch YouTube videos. Find a cheap online course. Ask questions. Do nothing. Most of all- show love to your friends andfamily.",
      "dc:creator": "Brandon Blankenstein",
      "guid": "https://medium.com/p/a037b074e772",
      "categories": [
        "newbie coder",
        "web developer",
        "learning web dev",
        "new coder"
      ],
      "isoDate": "2020-11-15T18:29:46.000Z"
    }
  ],
  "feedUrl": "https://medium.com/@brandonblankenstein/feed",
  "image": {
    "link": "https://medium.com/@brandonblankenstein?source=rss-5a51309d566e------2",
    "url": "https://cdn-images-1.medium.com/fit/c/150/150/0*nKDrzsdko1VqooFe",
    "title": "Blog Posts by Brandon Blankenstein on Medium"
  },
  "paginationLinks": {
    "self": "https://medium.com/@brandonblankenstein/feed"
  },
  "title": "Brandon's Blogs",
  "description": "Blog Posts by Brandon Blankenstein on Medium",
  "webMaster": "yourfriends@medium.com",
  "generator": "Medium",
  "link": "https://medium.com/@brandonblankenstein?source=rss-5a51309d566e------2",
  "lastBuildDate": "Tue, 08 Feb 2022 01:20:11 GMT"
}